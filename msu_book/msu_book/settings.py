import os
from dotenv import load_dotenv
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Загружаем переменные окружения из .env файла
load_dotenv(BASE_DIR / '.env')


"""
Django settings for msu_book project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')
print(os.getenv("DEBUG"))
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG").lower() in ('true', '1', 't')

ALLOWED_HOSTS = ['ggbook.serveo.net', '127.0.0.1', 'localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'django_celery_beat',
    'main',
    'my_auth',
    'booking',
    'rest_framework',
    'drf_spectacular',
    'drf_spectacular_sidecar',
    'rooms',
    'events'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'msu_book.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
CORS_ALLOW_ALL_ORIGINS = True
WSGI_APPLICATION = 'msu_book.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),

    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
'''AUTHENTICATION_BACKENDS = [
    'my_auth.authentication.TokenBackend'
]'''

AUTH_URL = "https://api.test.profcomff.com/auth/"
USERDATA_URL = "https://api.test.profcomff.com/userdata/"
# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
    'my_auth.authentication.ThirdPartyAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',  # Используем токенную аутентификацию
        # Добавь другие классы аутентификации, если нужно (например, SessionAuthentication для браузера)
    ],
}
SPECTACULAR_SETTINGS = {
    'SWAGGER_UI_DIST': 'SIDECAR',  # shorthand to use the sidecar instead
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
    'TITLE': 'gogrok Booking API',
    'DESCRIPTION': 'Бронь аудиторий в МГУ',
    'VERSION': '1.0.0',
    'SWAGGER_UI_SETTINGS': {
        # Попробуем сортировать операции по методу,
        # это может отключить алфавитную сортировку параметров
        'operationsSorter': 'method',
        # Можно также попробовать 'alpha' (по умолчанию) или убрать эту строку,
        # если 'method' не даст нужного эффекта.
        # 'tagsSorter': 'alpha', # Сортировка тегов (групп)
        'docExpansion': 'list', # Как раскрывать список операций при загрузке ('none', 'list', 'full')
    }
    # OTHER SETTINGS
}

# --- Настройки Celery ---
# URL вашего брокера сообщений (например, Redis или RabbitMQ)
CELERY_BROKER_URL = 'redis://localhost:6379/0' # Пример для Redis на локальной машине
# URL для хранения результатов задач (можно использовать тот же брокер)
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Moscow' # Установите вашу таймзону
CELERY_ENABLE_UTC = False # Рекомендуется False, если используете свою таймзону

# --- Настройки Celery Beat (Планировщик задач) ---
# Используем планировщик, хранящий расписание в базе данных Django
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Определение периодических задач
CELERY_BEAT_SCHEDULE = {
    'close-auctions-every-minute': {
        'task': 'booking.close_auctions', # Полное имя задачи: 'имя_приложения.имя_задачи'
        'schedule': 60.0,  # Запускать каждые 60 секунд
        # 'args': (), # Аргументы для задачи, если нужны
        # 'kwargs': {}, # Именованные аргументы, если нужны
        'options': {
            'expires': 55.0, # Задача должна завершиться за 55 сек, иначе будет считаться просроченной
        },
    },
    # Можно добавить другие периодические задачи сюда
    # 'cleanup-groups-daily': {
    #     'task': 'booking.cleanup_inactive_groups',
    #     'schedule': crontab(hour=3, minute=0), # Запускать каждый день в 3:00
    # },
}